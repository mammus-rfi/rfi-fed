name: 'Build Windows'

on: 
  pull_request:
  push:
    branches:
      - master
      - develop
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # Cache Rust com Swatinem/rust-cache (mais eficiente)
      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true

      # Cache Deno
      - name: Cache Deno
        uses: actions/cache@v3
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.json', 'deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      # Cache do build do Vite
      - name: Cache Vite build
        uses: actions/cache@v3
        with:
          path: |
            dist/
            .vite/
          key: ${{ runner.os }}-vite-${{ hashFiles('src/**/*', 'deno.json', 'vite.config.ts') }}
          restore-keys: |
            ${{ runner.os }}-vite-

      # Instalar dependências do Deno
      - name: Install Deno dependencies
        run: deno install --allow-scripts

      # Cache das dependências do projeto
      - name: Cache Deno project dependencies
        run: deno cache src/main.tsx
      - name: Prepare release notes
        id: notes
        run: |
          echo "RELEASE_BODY<<EOF" >> $env:GITHUB_OUTPUT
          Get-Content -Path "CHANGELOG.md" | ForEach-Object {
            $_ -replace '__VERSION__', '${{ github.ref_name }}' -replace '__DATE__', (Get-Date -Format "yyyy-MM-dd")
          } >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v__VERSION__
          releaseName: 'RFI v__VERSION__'
          releaseBody: ${{ steps.notes.outputs.RELEASE_BODY }}
          releaseDraft: false
          prerelease: false