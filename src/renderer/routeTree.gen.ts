/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './app/routes/__root'
import { Route as LoginRouteImport } from './app/routes/Login/route'
import { Route as DashboardRouteImport } from './app/routes/Dashboard/route'
import { Route as IndexImport } from './app/routes/index'
import { Route as DashboardIndexImport } from './app/routes/Dashboard/index'

// Create/Update Routes

const LoginRouteRoute = LoginRouteImport.update({
  id: '/Login',
  path: '/Login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/Dashboard',
  path: '/Dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/Dashboard': {
      id: '/Dashboard'
      path: '/Dashboard'
      fullPath: '/Dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/Login': {
      id: '/Login'
      path: '/Login'
      fullPath: '/Login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/Dashboard/': {
      id: '/Dashboard/'
      path: '/'
      fullPath: '/Dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Dashboard': typeof DashboardRouteRouteWithChildren
  '/Login': typeof LoginRouteRoute
  '/Dashboard/': typeof DashboardIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Login': typeof LoginRouteRoute
  '/Dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/Dashboard': typeof DashboardRouteRouteWithChildren
  '/Login': typeof LoginRouteRoute
  '/Dashboard/': typeof DashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/Dashboard' | '/Login' | '/Dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/Login' | '/Dashboard'
  id: '__root__' | '/' | '/Dashboard' | '/Login' | '/Dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  LoginRouteRoute: typeof LoginRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  LoginRouteRoute: LoginRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Dashboard",
        "/Login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Dashboard": {
      "filePath": "Dashboard/route.tsx",
      "children": [
        "/Dashboard/"
      ]
    },
    "/Login": {
      "filePath": "Login/route.tsx"
    },
    "/Dashboard/": {
      "filePath": "Dashboard/index.tsx",
      "parent": "/Dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
